<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GO Jzy</title>
    <link>https://YoungJzy.github.io/</link>
    <description>Recent content on GO Jzy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2019 Jzy.</copyright>
    <lastBuildDate>Thu, 28 Mar 2019 14:40:23 +0800</lastBuildDate>
    
	<atom:link href="https://YoungJzy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>取整</title>
      <link>https://YoungJzy.github.io/golang/%E5%8F%96%E6%95%B4/</link>
      <pubDate>Wed, 27 Mar 2019 16:26:14 +0800</pubDate>
      
      <guid>https://YoungJzy.github.io/golang/%E5%8F%96%E6%95%B4/</guid>
      <description>golang中的向上取整，向下取整，以及四舍五入
概述  官方的math包只给了向上和向下取整，分别是math.Ceil()[向上取整]，math.Floor()[向下取整]，并没有四舍五入的直接方法，但是我们可以通过向下取整变相的实现四舍五入。  用法 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) func main(){ x := 1.1 fmt.Println(math.Ceil(x)) // 输出为2 fmt.Println(math.Floor(x)) // 输出为1 }  四舍五入  Word&amp;rsquo;s cheap, show u my code  package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) func main(){ x := 1.1 y := 1.6 fmt.Println(math.Floor(x + 0.5)) // 输出为1 fmt.Println(math.Floor(y + 0.5)) // 输出为2 }  很简单吧～</description>
    </item>
    
    <item>
      <title>多平台架构镜像</title>
      <link>https://YoungJzy.github.io/docker/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 15 Aug 2019 09:03:06 +0800</pubDate>
      
      <guid>https://YoungJzy.github.io/docker/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/</guid>
      <description>背景 国际形势严峻，x86芯片的受到限制，而采用IP授权的ARM芯片慢慢火热起来，x86服务起将不是唯一选择。两种架构CPU的指令集不通，从而对docker镜像而言，不通的芯片架构对应的镜像也是不同的。今天就来讲讲跨平台的docker镜像构建。
什么是manifest 简单来说，就是docker提供给镜像的一份清单，可以给一个镜像名绑定不同平台的镜像，根据architeitecture字段区分。建立了清单之后，docker在pull镜像时则会去拉适配自己当前平台架构的镜像。
自从Docker registry v2.3和Docker 1.10开始，Docker通过支持新的image Media 类型 manifest list 实现了Multi architecture Docker镜像功能
 一个清单列表包含了多个不同系统不同架构的镜像：   为什么要用manifest 不同的平台构建的镜像是不同的，x86的镜像无法在ARM服务起上跑，反之亦然，所以需要以不同的tag进行区分，x86平台构建的镜像，需要打上x86的标签。这并不是我们想要的结果，那么如何做到两个平台镜像，使用同一个镜像名称和标签，拉取时自动识别呢？那就要用到manifest了。
当有一个镜像需要在不同架构中运行时，我们需要使用不同的tag来区分比如： arm平台：test:arm x86平台: test:amd 当我们在不同架构平台使用，需要根据tag来指定下载那一个镜像。 eg: docker pull test:amd manifest list 解决的就是这个问题，可以直接manifest 不需要通过tag的方式下载，manifest list会自动根据客户端的平台架构，提供相应的镜像。  如何使用 开启manifest  docker cli默认是没有开启manifest，需要配置开启。  Centos下直接在 ~/.docker/config.json中添加参数，然后重启docker。
{ &amp;quot;experimental&amp;quot;: &amp;quot;enabled&amp;quot; }  Docker for Desktop (windows/MacOSX环境)下，勾选deamon&amp;ndash;&amp;gt;Experimental features 创建多平台镜像  开启manifest后，通过如下命令创建、提交和查看：  // 创建多平台镜像 docker manifest create test:v1 test:arm test:amd  // 将多平台镜像推到镜像仓库 docker manifest push test:v1  // 查看多平台镜像相关信息 docker manifest inspect test:v1  以官方centos镜像为例子，看一下manifest中存了哪些信息。 - 可以看到用红线标出的&amp;quot;platform&amp;quot;字段，centos:7这个镜像名对应了5个平台架构的镜像，而我们平时拉的都是amd64这个镜像，docker自动识别了x86的CPU架构，对应拉取了amd64的镜像，如果我们在arm上64的机器上拉去镜像，也会对应拉取arm64的镜像。</description>
    </item>
    
    <item>
      <title>Goroutine的管理</title>
      <link>https://YoungJzy.github.io/golang/goroutine%E7%9A%84%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 02 Aug 2019 15:57:26 +0800</pubDate>
      
      <guid>https://YoungJzy.github.io/golang/goroutine%E7%9A%84%E7%AE%A1%E7%90%86/</guid>
      <description>Goroutine的管理有两种方式： - WaitGroup - Context
什么是WaitGroup 顾名思义，WaitGroup是等待组，即设置一个等待组，来等待goroutine的执行，只有当设置等待的goroutine的数量达到目标数之后，程序才会继续向下执行。
func main() { var wg sync.WaitGroup wg.Add(2) go func() { defer wg.Done() time.Sleep(2*time.Second) fmt.Println(&amp;quot;1号完成&amp;quot;) }() go func() { defer wg.Done() time.Sleep(2*time.Second) fmt.Println(&amp;quot;2号完成&amp;quot;) }() wg.Wait() fmt.Println(&amp;quot;好了，大家都完成了，解散&amp;quot;) }  一个很简单的例子，一定要例子中的2个goroutine都完成任务，才算是完成，先做好的需要等待未完成的Goroutine，所有的goroutine要都全部完成才可以。就好比军训时，教官让学员报数，到达场地的学员应到28人，实到28人时，开始训练，实到人数没有达到应到人数，则一直等待。
chan通知 WaitGroup是一种被动式（等待式）的控制并发的方法，有时候一个goroutine我们需要它一直工作，直到发起让一个goroutine停止工作的命令，这种情况下就需要主动式的控制并发的方法。
这样我们就需要设置一个goroutine和主程序都读的到的变量，让goroutine运行是一直监听该变量，变量变为停止，则停止执行。golang中有一种通道类型（chan），可以更方便的完成上述操作，通过chan + select方法。
func main() { stopCh := make(chan bool) go func() { for { select { case &amp;lt;-stopCh: fmt.Println(&amp;quot;打卡下班...&amp;quot;) return default: fmt.Println(&amp;quot;goroutine工作中...&amp;quot;) time.Sleep(2 * time.Second) } } }() time.Sleep(10 * time.Second) fmt.</description>
    </item>
    
    <item>
      <title>Haproxy配置tcp转发</title>
      <link>https://YoungJzy.github.io/kubernetes/haproxy%E9%85%8D%E7%BD%AEtcp%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Thu, 25 Jul 2019 15:11:13 +0800</pubDate>
      
      <guid>https://YoungJzy.github.io/kubernetes/haproxy%E9%85%8D%E7%BD%AEtcp%E8%BD%AC%E5%8F%91/</guid>
      <description>在生产上碰到这样一个问题： 租户的请求是tcp的请求，而haproxy-ingress默认是转发http请求的，导致用户请求时总是报超时。
于是我们需要进行修改，使得haproxy监听端口来转发tcp的流量。
解决方法： 一、创建一个需要转发tcp流量应用对应的configmap配置文件：  $ vim tcp-configmap-sample.yaml  apiVersion: v1 kind: ConfigMap metadata: name: demo-ha-tcp-ingress-configmap namespace: &amp;quot;demonamespace&amp;quot; data: 3355: &amp;quot;demonamespace/demo-svc:8080&amp;quot;  当把这个configmap配置到haproxy的deployment后，haproxy的容器中就会监听这个3355端口来转发tcp的流量到demo-svc的8080端口
二、配置haproxy，将configmap应用起来：  $ kubectl -n demonamespace edit deployment demo-haproxy  在container的args处添加- —tcp-services-configmap参数然后将上面创建configmap所在的命名空间和configmap名填写在该参数后面
containers: - args: - --default-backend-service=$(POD_NAMESPACE)/demo-svc - --default-ssl-certificate=$(POD_NAMESPACE)/tls-secret - --ingress-class=ha-demo - --tcp-services-configmap=$(POD_NAMESPACE)/demo-ha-tcp-ingress-configmap  配置好configmap后，将3355端口映射出来，给外部访问： containers: - args: - --default-backend-service=$(POD_NAMESPACE)/hx-xl-iot-kpi-svc - --default-ssl-certificate=$(POD_NAMESPACE)/tls-secret - --ingress-class=ha-hx-xl-iot-kpi - --tcp-services-configmap=$(POD_NAMESPACE)/iothaproxy-tcp-ingress-configmap ······ ports: - containerPort: 80 // ---&amp;gt; 将这个80改为3355 hostPort: 30035 name: http protocol: TCP - containerPort: 443 name: https protocol: TCP - containerPort: 1936 hostPort: 19035 name: stat protocol: TCP  若需要添加一个端口映射，只需复制port映射的配置即可，这样会映射两个端口，一个监听http流量转发，一个监听tcp流量转发</description>
    </item>
    
    <item>
      <title>Goroutine调度器</title>
      <link>https://YoungJzy.github.io/goodposts/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <pubDate>Thu, 28 Mar 2019 16:11:57 +0800</pubDate>
      
      <guid>https://YoungJzy.github.io/goodposts/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <description> 概述 Go采用了用户层轻量级thread或者说是类coroutine的概念来解决这些问题，Go将之称为”goroutine“。goroutine占用的资源非常小(Go 1.4将每个goroutine stack的size默认设置为2k)，goroutine调度的切换也不用陷入(trap)操作系统内核层完成，代价很低。因此，一个Go程序中可以创建成千上万个并发的goroutine。所有的Go代码都在goroutine中执行，哪怕是go的runtime也不例外。将这些goroutines按照一定算法放到“CPU”上执行的程序就称为goroutine调度器或goroutine scheduler
 关于goroutine调度器 https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/  </description>
    </item>
    
  </channel>
</rss>