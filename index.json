[
{
	"uri": "https://YoungJzy.github.io/golang/%E5%8F%96%E6%95%B4/",
	"title": "取整",
	"tags": [],
	"description": "",
	"content": " golang中的向上取整，向下取整，以及四舍五入\n概述  官方的math包只给了向上和向下取整，分别是math.Ceil()[向上取整]，math.Floor()[向下取整]，并没有四舍五入的直接方法，但是我们可以通过向下取整变相的实现四舍五入。  用法 package main import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; ) func main(){ x := 1.1 fmt.Println(math.Ceil(x)) // 输出为2 fmt.Println(math.Floor(x)) // 输出为1 }  四舍五入  Word\u0026rsquo;s cheap, show u my code  package main import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; ) func main(){ x := 1.1 y := 1.6 fmt.Println(math.Floor(x + 0.5)) // 输出为1 fmt.Println(math.Floor(y + 0.5)) // 输出为2 }  很简单吧～\n"
},
{
	"uri": "https://YoungJzy.github.io/golang/",
	"title": "Golang",
	"tags": [],
	"description": "",
	"content": " 取整 Goroutine管理  "
},
{
	"uri": "https://YoungJzy.github.io/golang/goroutine%E7%9A%84%E7%AE%A1%E7%90%86/",
	"title": "Goroutine的管理",
	"tags": [],
	"description": "",
	"content": " Goroutine的管理有两种方式： - WaitGroup - Context\n什么是WaitGroup 顾名思义，WaitGroup是等待组，即设置一个等待组，来等待goroutine的执行，只有当设置等待的goroutine的数量达到目标数之后，程序才会继续向下执行。\nfunc main() { var wg sync.WaitGroup wg.Add(2) go func() { defer wg.Done() time.Sleep(2*time.Second) fmt.Println(\u0026quot;1号完成\u0026quot;) }() go func() { defer wg.Done() time.Sleep(2*time.Second) fmt.Println(\u0026quot;2号完成\u0026quot;) }() wg.Wait() fmt.Println(\u0026quot;好了，大家都完成了，解散\u0026quot;) }  一个很简单的例子，一定要例子中的2个goroutine都完成任务，才算是完成，先做好的需要等待未完成的Goroutine，所有的goroutine要都全部完成才可以。就好比军训时，教官让学员报数，到达场地的学员应到28人，实到28人时，开始训练，实到人数没有达到应到人数，则一直等待。\nchan通知 WaitGroup是一种被动式（等待式）的控制并发的方法，有时候一个goroutine我们需要它一直工作，直到发起让一个goroutine停止工作的命令，这种情况下就需要主动式的控制并发的方法。\n这样我们就需要设置一个goroutine和主程序都读的到的变量，让goroutine运行是一直监听该变量，变量变为停止，则停止执行。golang中有一种通道类型（chan），可以更方便的完成上述操作，通过chan + select方法。\nfunc main() { stopCh := make(chan bool) go func() { for { select { case \u0026lt;-stopCh: fmt.Println(\u0026quot;打卡下班...\u0026quot;) return default: fmt.Println(\u0026quot;goroutine工作中...\u0026quot;) time.Sleep(2 * time.Second) } } }() time.Sleep(10 * time.Second) fmt.Println(\u0026quot;可以了，下班！\u0026quot;) stopCh\u0026lt;- true // 最后再等待10秒，查看goroutine是否真的退出了 time.Sleep(10 * time.Second) }  这个例子中，我们定义了一个stopCh的chan，goroutine在后台判断shopCh中国是否有值传入，如果收到值，则打卡下班，没有收到，则一直工作，这样就可以通过它来通知goroutine停止工作。这种方式是一种比较优雅的方式来控制goroutine的运行，但是也有局限。\nfunc main() { stopCh := make(chan bool) go func() { for { select { case \u0026lt;-stopCh: fmt.Println(\u0026quot;goroutine1打卡下班...\u0026quot;) return default: fmt.Println(\u0026quot;goroutine1工作中...\u0026quot;) time.Sleep(2 * time.Second) } } }() go func() { for { select { case \u0026lt;-stopCh: fmt.Println(\u0026quot;goroutine2打卡下班...\u0026quot;) return default: fmt.Println(\u0026quot;goroutine2工作中...\u0026quot;) time.Sleep(2 * time.Second) } } }() time.Sleep(10 * time.Second) fmt.Println(\u0026quot;可以了，下班！\u0026quot;) stopCh\u0026lt;- true // 最后再等待10秒，查看有几个goroutine退出了 time.Sleep(10 * time.Second) }  上面这个例子中，查看输出可以看见，当可以了，下班！出现后，一个goroutine打卡下班，但仍有一个goroutine在继续工作。一个chan传入一次值，只能停止一个goroutine的工作，当存在多个goroutine工作时又会怎样呢\nContext 开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。所以我们需要一种可以跟踪goroutine的方案，才可以达到控制他们的目的，这就是Go语言为我们提供的Context，称之为上下文非常贴切，它就是goroutine的上下文。\n我们看一下Context如何控制多个goroutine工作的呢\nfunc main() { ctx, cancel := context.WithCancel(context.Background()) go watch(ctx,\u0026quot;goroutine1\u0026quot;) go watch(ctx,\u0026quot;goroutine2\u0026quot;) go watch(ctx,\u0026quot;goroutine3\u0026quot;) time.Sleep(10 * time.Second) fmt.Println(\u0026quot;可以了，下班！\u0026quot;) cancel() // 最后再等待10秒，查看有几个goroutine退出了 time.Sleep(10 * time.Second) } func watch(ctx context.Context, name string) { for { select { case \u0026lt;-ctx.Done(): fmt.Println(name,\u0026quot;打卡下班...\u0026quot;) return default: fmt.Println(name,\u0026quot;goroutine工作中...\u0026quot;) time.Sleep(2 * time.Second) } } }  我们在通过这个例子和上个例子做对比可以发现，Context只需调用一个cance()方法可以直接将所有关联的goroutine终止工作，就像一个总电闸，按下关闭按钮，整个房间的灯就会全部关闭。\n 本文参考Go语言实战笔记（二十）| Go Context 加了一些自己的理解。  "
},
{
	"uri": "https://YoungJzy.github.io/kubernetes/",
	"title": "kubernetes",
	"tags": [],
	"description": "",
	"content": " haproxy配置tcp转发  "
},
{
	"uri": "https://YoungJzy.github.io/goodposts/",
	"title": "goodposts",
	"tags": [],
	"description": "",
	"content": " goroutine调度器  "
},
{
	"uri": "https://YoungJzy.github.io/kubernetes/haproxy%E9%85%8D%E7%BD%AEtcp%E8%BD%AC%E5%8F%91/",
	"title": "Haproxy配置tcp转发",
	"tags": [],
	"description": "",
	"content": " 在生产上碰到这样一个问题： 租户的请求是tcp的请求，而haproxy-ingress默认是转发http请求的，导致用户请求时总是报超时。\n于是我们需要进行修改，使得haproxy监听端口来转发tcp的流量。\n解决方法： 一、创建一个需要转发tcp流量应用对应的configmap配置文件：  $ vim tcp-configmap-sample.yaml  apiVersion: v1 kind: ConfigMap metadata: name: demo-ha-tcp-ingress-configmap namespace: \u0026quot;demonamespace\u0026quot; data: 3355: \u0026quot;demonamespace/demo-svc:8080\u0026quot;  当把这个configmap配置到haproxy的deployment后，haproxy的容器中就会监听这个3355端口来转发tcp的流量到demo-svc的8080端口\n二、配置haproxy，讲configmap应用起来：  $ kubectl -n demonamespace edit deployment demo-haproxy  在container的args处添加- —tcp-services-configmap参数然后将上面创建configmap所在的命名空间和configmap名填写在该参数后面\ncontainers: - args: - --default-backend-service=$(POD_NAMESPACE)/demo-svc - --default-ssl-certificate=$(POD_NAMESPACE)/tls-secret - --ingress-class=ha-demo - --tcp-services-configmap=$(POD_NAMESPACE)/demo-ha-tcp-ingress-configmap  配置好configmap后，将3355端口映射出来，给外部访问： containers: - args: - --default-backend-service=$(POD_NAMESPACE)/hx-xl-iot-kpi-svc - --default-ssl-certificate=$(POD_NAMESPACE)/tls-secret - --ingress-class=ha-hx-xl-iot-kpi - --tcp-services-configmap=$(POD_NAMESPACE)/iothaproxy-tcp-ingress-configmap ······ ports: - containerPort: 80 // ---\u0026gt; 将这个80改为3355 hostPort: 30035 name: http protocol: TCP - containerPort: 443 name: https protocol: TCP - containerPort: 1936 hostPort: 19035 name: stat protocol: TCP  若需要添加一个端口映射，只需复制port映射的配置即可，这样会映射两个端口，一个监听http流量转发，一个监听tcp流量转发\n"
},
{
	"uri": "https://YoungJzy.github.io/goodposts/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8/",
	"title": "Goroutine调度器",
	"tags": [],
	"description": "",
	"content": " 概述 Go采用了用户层轻量级thread或者说是类coroutine的概念来解决这些问题，Go将之称为”goroutine“。goroutine占用的资源非常小(Go 1.4将每个goroutine stack的size默认设置为2k)，goroutine调度的切换也不用陷入(trap)操作系统内核层完成，代价很低。因此，一个Go程序中可以创建成千上万个并发的goroutine。所有的Go代码都在goroutine中执行，哪怕是go的runtime也不例外。将这些goroutines按照一定算法放到“CPU”上执行的程序就称为goroutine调度器或goroutine scheduler\n 关于goroutine调度器 https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/  "
},
{
	"uri": "https://YoungJzy.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " something to share  About golang Some good posts About kubernetes  "
},
{
	"uri": "https://YoungJzy.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://YoungJzy.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]