[
{
	"uri": "https://YoungJzy.github.io/golang/%E5%8F%96%E6%95%B4/",
	"title": "取整",
	"tags": [],
	"description": "",
	"content": " golang中的向上取整，向下取整，以及四舍五入\n概述  官方的math包只给了向上和向下取整，分别是math.Ceil()[向上取整]，math.Floor()[向下取整]，并没有四舍五入的直接方法，但是我们可以通过向下取整变相的实现四舍五入。  用法 package main import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; ) func main(){ x := 1.1 fmt.Println(math.Ceil(x)) // 输出为2 fmt.Println(math.Floor(x)) // 输出为1 }  四舍五入  Word\u0026rsquo;s cheap, show u my code  package main import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; ) func main(){ x := 1.1 y := 1.6 fmt.Println(math.Floor(x + 0.5)) // 输出为1 fmt.Println(math.Floor(y + 0.5)) // 输出为2 }  简单的很让人舒服，很巧妙的方法。\n"
},
{
	"uri": "https://YoungJzy.github.io/golang/",
	"title": "Golang",
	"tags": [],
	"description": "",
	"content": " 取整 Goroutine管理  "
},
{
	"uri": "https://YoungJzy.github.io/golang/goroutine%E7%9A%84%E7%AE%A1%E7%90%86/",
	"title": "Goroutine的管理",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://YoungJzy.github.io/goodposts/",
	"title": "goodposts",
	"tags": [],
	"description": "",
	"content": " goroutine调度器  "
},
{
	"uri": "https://YoungJzy.github.io/goodposts/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8/",
	"title": "Goroutine调度器",
	"tags": [],
	"description": "",
	"content": " 概述 Go采用了用户层轻量级thread或者说是类coroutine的概念来解决这些问题，Go将之称为”goroutine“。goroutine占用的资源非常小(Go 1.4将每个goroutine stack的size默认设置为2k)，goroutine调度的切换也不用陷入(trap)操作系统内核层完成，代价很低。因此，一个Go程序中可以创建成千上万个并发的goroutine。所有的Go代码都在goroutine中执行，哪怕是go的runtime也不例外。将这些goroutines按照一定算法放到“CPU”上执行的程序就称为goroutine调度器或goroutine scheduler\n 关于goroutine调度器 https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/  "
},
{
	"uri": "https://YoungJzy.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " something to share  About golang Some good posts  "
},
{
	"uri": "https://YoungJzy.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://YoungJzy.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]