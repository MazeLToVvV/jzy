<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on GO Jzy</title>
    <link>https://YoungJzy.github.io/docker/</link>
    <description>Recent content in docker on GO Jzy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2019 Jzy.</copyright>
    <lastBuildDate>Thu, 15 Aug 2019 09:04:23 +0800</lastBuildDate>
    
	<atom:link href="https://YoungJzy.github.io/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多平台架构镜像</title>
      <link>https://YoungJzy.github.io/docker/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 15 Aug 2019 09:03:06 +0800</pubDate>
      
      <guid>https://YoungJzy.github.io/docker/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/</guid>
      <description>背景 国际形势严峻，x86芯片的受到限制，而采用IP授权的ARM芯片慢慢火热起来，x86服务起将不是唯一选择。两种架构CPU的指令集不通，从而对docker镜像而言，不通的芯片架构对应的镜像也是不同的。今天就来讲讲跨平台的docker镜像构建。
什么是manifest 简单来说，就是docker提供给镜像的一份清单，可以给一个镜像名绑定不同平台的镜像，根据architeitecture字段区分。建立了清单之后，docker在pull镜像时则会去拉适配自己当前平台架构的镜像。
自从Docker registry v2.3和Docker 1.10开始，Docker通过支持新的image Media 类型 manifest list 实现了Multi architecture Docker镜像功能
 一个清单列表包含了多个不同系统不同架构的镜像：   为什么要用manifest 不同的平台构建的镜像是不同的，x86的镜像无法在ARM服务起上跑，反之亦然，所以需要以不同的tag进行区分，x86平台构建的镜像，需要打上x86的标签。这并不是我们想要的结果，那么如何做到两个平台镜像，使用同一个镜像名称和标签，拉取时自动识别呢？那就要用到manifest了。
当有一个镜像需要在不同架构中运行时，我们需要使用不同的tag来区分比如： arm平台：test:arm x86平台: test:amd 当我们在不同架构平台使用，需要根据tag来指定下载那一个镜像。 eg: docker pull test:amd manifest list 解决的就是这个问题，可以直接manifest 不需要通过tag的方式下载，manifest list会自动根据客户端的平台架构，提供相应的镜像。  如何使用 开启manifest  docker cli默认是没有开启manifest，需要配置开启。  Centos下直接在 ~/.docker/config.json中添加参数，然后重启docker。
{ &amp;quot;experimental&amp;quot;: &amp;quot;enabled&amp;quot; }  Docker for Desktop (windows/MacOSX环境)下，勾选deamon&amp;ndash;&amp;gt;Experimental features 创建多平台镜像  开启manifest后，通过如下命令创建、提交和查看：  // 创建多平台镜像 docker manifest create test:v1 test:arm test:amd  // 将多平台镜像推到镜像仓库 docker manifest push test:v1  // 查看多平台镜像相关信息 docker manifest inspect test:v1  以官方centos镜像为例子，看一下manifest中存了哪些信息。 - 可以看到用红线标出的&amp;quot;platform&amp;quot;字段，centos:7这个镜像名对应了5个平台架构的镜像，而我们平时拉的都是amd64这个镜像，docker自动识别了x86的CPU架构，对应拉取了amd64的镜像，如果我们在arm上64的机器上拉去镜像，也会对应拉取arm64的镜像。</description>
    </item>
    
  </channel>
</rss>