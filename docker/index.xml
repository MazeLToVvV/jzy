<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on GO Jzy</title>
    <link>https://YoungJzy.github.io/docker/</link>
    <description>Recent content in docker on GO Jzy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2019 Jzy.</copyright>
    <lastBuildDate>Thu, 15 Aug 2019 09:04:23 +0800</lastBuildDate>
    
	<atom:link href="https://YoungJzy.github.io/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多平台架构镜像</title>
      <link>https://YoungJzy.github.io/docker/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 15 Aug 2019 09:03:06 +0800</pubDate>
      
      <guid>https://YoungJzy.github.io/docker/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/</guid>
      <description> 背景 国际形势严峻，x86芯片的受到限制，而采用IP授权的ARM芯片慢慢火热起来，x86服务起将不是唯一选择。两种架构CPU的指令集不通，从而对docker镜像而言，不通的芯片架构对应的镜像也是不同的。今天就来讲讲跨平台的docker镜像构建。
什么是manifest 在介绍manifest之前，先说说现状是什么：不同的平台构建的镜像，需要以不同的tag进行区分，x86平台构建的镜像，需要打上x86的标签。这并不是我们想要的结果，那么如何做到两个平台镜像，使用同一个镜像名称和标签，拉取时自动识别呢？那就要用到manifest了。
自从Docker registry v2.3和Docker 1.10开始，Docker通过支持新的image Media 类型 manifest list 实现了Multi architecture Docker镜像功能
 一个清单列表包含了多个不同系统不同架构的镜像：   </description>
    </item>
    
  </channel>
</rss>